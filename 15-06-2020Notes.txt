		Templates in OOP
- Template comprises of sample design with sample data, which you can customize according to your requirements.

- A developer need to design templates for client. so that he can implement according to his requirements.

- Templates are mostly used for "Rollouts".

	a) End to End Implementation
	b) Upgrade
	c) Rollout
	d) Support 

- What is a template in software development? and How templates are designed ?
A. Abstract Class

- Abstract class is a class that comprises of functionalities both implemented and not-implemented i.e to be implemented.
- Abstract class contains complete and incomplete functionalities.
- If any functionaltiy is not-implemented then it should be designed as Abstract.
- Any imcomplete method in a class must be marked as "abstract".

- You can't create an object for abstract class.

- When you are using abstract members in a class the implementation details are hidden from the user, only functionality will be provided through implemented class.

- The mechanism of hiding the members in a class and providing implementation for those members is known as "Abstraction".

Ex:
interface ProductContract {
    Name:string;
    Price:number;
    Qty:number;
    Total():number;
    Print():void;
}
abstract class ProductTemplate implements ProductContract {
    public Name:string;
    public Price:number;
    public Qty:number;
    public abstract Total():number;
    public Print():void {
        console.log(`Name=${this.Name}\nPrice=${this.Price}\nQty=${this.Qty}\nTotal=${this.Total()}`);
    };
}
class Product extends ProductTemplate {
    public Name = "Samsung TV";
    public Price = 34000.55;
    public Qty = 2;
    public Total():number {
        return this.Qty * this.Price;
    }
    public Print():void {
        super.Print();
    }
}
let tv = new Product();
tv.Print();
console.log(`------------------`);
let mobile = new Product();
mobile.Name = "LG Mobile";
mobile.Price = 12000.33;
mobile.Qty = 2;
mobile.Print();


